name: Manual Deploy to DigitalOcean

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag'
        required: true
        default: 'latest'
env:
    REGISTRY_URL: "https://registry.digitalocean.com/zedwerks"
    REGISTRY: registry.digitalocean.com/zedwerks
    IMAGE_NAME: keycloak-smart-fhir
    DROPLET_NAME: smart-kc
    DROPLET_REGION: tor1
    DROPLET_SIZE: s-1vcpu-1gb
    SSH_KEY_ID: "NONE"
    SSH_KEY_FINGERPRINT: "NONE"
    DROPLET_IP: "blank"
    droplet_exists: "false"

jobs:    
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract short SHA referencing the image tag
        id: vars
        run: echo "::set-output name=short_sha::${GITHUB_SHA::8}"

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Authenticate with DigitalOcean
        env:
          DIGITALOCEAN_API_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        run: doctl auth init -t $DIGITALOCEAN_API_TOKEN

      - name: Check if droplet exists
        id: check_droplet
        env:
          DROPLET_NAME: ${{ env.DROPLET_NAME }}
        run: |
          if doctl compute droplet list --no-header --format Name | grep -q "^$DROPLET_NAME$"; then
            echo "Droplet already exists."
            echo "droplet_exists=true" >> $GITHUB_ENV
          else
            echo "Droplet does not exist."
            echo "droplet_exists=false" >> $GITHUB_ENV
          fi

      - name: Create Droplet if needed
        if: env.droplet_exists == 'false'
        id: create_droplet
        env:
          DROPLET_NAME: ${{ env.DROPLET_NAME }}
          DROPLET_REGION: ${{ env.DROPLET_REGION }}
          DROPLET_SIZE: ${{ env.DROPLET_SIZE }}
          DROPLET_KEY_FINGERPRINT: ${{ secrets.DO_SSH_KEY_FINGERPRINT }}
        run: |
          doctl compute droplet create $DROPLET_NAME \
            --verbose \
            --region $DROPLET_REGION \
            --size $DROPLET_SIZE \
            --image docker-20-04 \
            --ssh-keys $DROPLET_KEY_FINGERPRINT \
            --wait \
            --format ID,PublicIPv4 \
            --no-header \
            --output json > droplet.json

      - name: Get Droplet IP
        if: steps.check_droplet.outputs.droplet_exists == 'true'
        env:
          DROPLET_NAME: ${{ env.DROPLET_NAME }}
        run: |
          DROPLET_IP=$(doctl compute droplet list --no-header --format Name,PublicIPv4 | grep "$DROPLET_NAME" | awk '{print $2}')
          echo "DROPLET_IP=${DROPLET_IP}" >> $GITHUB_ENV
      
      - name: Intstall Docker
        uses: docker-practice/actions-setup-docker@master

      - name: Setup SSH Login
        env:
          DO_SSH_PRIVATE_KEY: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          DROPLET_IP: ${{ env.DROPLET_IP }}
        run: |
          mkdir -p ~/.ssh
          echo "$DO_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $DROPLET_IP >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Deploy to Digital Ocean Droplet and Run via SSH 
        env:
          DROPLET_IP: ${{ env.DROPLET_IP }}
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          SHA: ${{ steps.vars.outputs.short_sha }}
          REGISTRY_URL: ${{ env.REGISTRY_URL }}
        run: |
            ssh root@$DROPLET_IP << 'EOF'
              echo "Pulling image from registry..."
              echo "docker image = $REGISTRY/$IMAGE_NAME:$SHA"
              docker login -u $DIGITALOCEAN_ACCESS_TOKEN -p $DIGITALOCEAN_ACCESS_TOKEN $REGISTRY 
              doctl registry login -u $DIGITALOCEAN_ACCESS_TOKEN -t $DIGITALOCEAN_ACCESS_TOKEN  $REGISTRY
              docker pull $REGISTRY/$IMAGE_NAME:$SHA
              echo "Running container..."
              docker run -d --name $IMAGE_NAME -p 80:8080 $REGISTRY/$IMAGE_NAME:$SHA       
            EOF