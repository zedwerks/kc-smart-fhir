name: Build

on:
  workflow_run:
    workflows: ["CodeQL"]
    types:
      - completed
  workflow_dispatch:

env:
  REGISTRY_URL: "https://registry.digitalocean.com/zedwerks"
  REGISTRY: registry.digitalocean.com/zedwerks
  IMAGE_NAME: keycloak-smart-fhir
  DROPLET_NAME: smart-on-fhir
  DROPLET_REGION: tor1
  DROPLET_SIZE: s-1vcpu-1gb
  DROPLET_IP: "blank"
  droplet_exists: "false"

jobs:
  test:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout latest code
        uses: actions/checkout@v2

      - name: Run tests
        run: echo "Tests passed"
  build:
    name: Build Docker image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout latest code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image
        run: docker build .
  publish:
    name: Publish Image to DO Registry
    runs-on: ubuntu-latest

    steps:
      - name: Checkout latest code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived token
        run: doctl registry login --expiry-seconds 600

      - name: Extract short SHA for tagging image
        id: vars
        run: echo "::set-output name=short_sha::${GITHUB_SHA::8}"

      - name: Clean up older Docker images
        env:
          IMAGES_TO_KEEP: 7
          REGISTRY: ${{ env.REGISTRY }}
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        run: |
          IMAGES_TO_KEEP=5  # Number of images to keep
          IMAGE_LIST=$(doctl registry repository list-manifests $REGISTRY --access-token $DIGITALOCEAN_ACCESS_TOKEN --interactive false -o text | sort -k2 | head -n -$IMAGES_TO_KEEP)
          echo $IMAGE_LIST
          echo "$IMAGE_LIST" | while read -r DIGEST UPDATED_AT; do
            echo "Deleting image at $UPDATED_AT"
            doctl registry repository delete-manifest $REGISTRY $DIGEST --access-token $DIGITALOCEAN_ACCESS_TOKEN --force --verbose --interactive false
          done

      - name: Docker login
        run: docker login ${{ env.REGISTRY }}

      - name: Build Docker image
        run: docker build . -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.short_sha }} -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Push Docker image to DigitalOcean Container Registry
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.short_sha }}

      - name: Push 'latest' Docker image to DigitalOcean Container Registry
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
