name: Deploy to Digital Ocean Droplet

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Docker image tag"
        required: true
        default: "latest"

env:
  REGISTRY_URL: "https://registry.digitalocean.com/zedwerks"
  REGISTRY: registry.digitalocean.com/zedwerks
  IMAGE_NAME: keycloak-smart-fhir
  DROPLET_NAME: smart-on-fhir
  DROPLET_REGION: tor1
  DROPLET_SIZE: s-1vcpu-1gb
  DO_SSH_KEY_ID: "unset"
  SSH_KEY_FINGERPRINT: "unset"
  DROPLET_IP: "blank"
  droplet_exists: "false"

jobs:
   droplet:
    name: Create Droplet, if not exists
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Authenticate with DigitalOcean
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        run: doctl auth init -t $DIGITALOCEAN_ACCESS_TOKEN

      - name: Check if droplet exists
        id: check_droplet
        env:
          DROPLET_NAME: ${{ env.DROPLET_NAME }}
        run: |
          if doctl compute droplet list --no-header --format Name | grep -q "^$DROPLET_NAME$"; then
            echo "Droplet already exists."
            echo "droplet_exists=true" >> $GITHUB_ENV
          else
            echo "Droplet does not exist."
            echo "droplet_exists=false" >> $GITHUB_ENV
          fi

      - name: Create Droplet if needed
        if: env.droplet_exists == 'false'
        id: create_droplet
        env:
          DROPLET_NAME: ${{ env.DROPLET_NAME }}
          DROPLET_REGION: ${{ env.DROPLET_REGION }}
          DROPLET_SIZE: ${{ env.DROPLET_SIZE }}
        run: |
          doctl compute droplet create $DROPLET_NAME \
            --verbose \
            --region $DROPLET_REGION \
            --size $DROPLET_SIZE \
            --image docker-20-04 \
            --ssh-keys $DO_S

      - name: Get Droplet IP
        env:
          DROPLET_NAME: ${{ env.DROPLET_NAME }}
        run: |
          DROPLET_IP=$(doctl compute droplet list --no-header --format Name,PublicIPv4 | grep "$DROPLET_NAME" | awk '{print $2}')
          echo "DROPLET_IP=${DROPLET_IP}" >> $GITHUB_ENV
   deploy:
    name: Deploy to Digital Ocean Droplet
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: droplet
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate with DigitalOcean
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        run: doctl auth init -t $DIGITALOCEAN_ACCESS_TOKEN

      - name: Get SSH Key ID from Fingerprint
        env:
          DROPLET_NAME: ${{ env.DROPLET_NAME }}
          SSH_KEY_FINGERPRINT: ${{ secrets.DO_SSH_KEY_FINGERPRINT }}
        run: |
          DO_SSH_KEY_ID=$(doctl compute ssh-key list --no-header --format FingerPrint,ID | grep "$SSH_KEY_FINGERPRINT" | awk '{print $2}')
          echo "DO_SSH_KEY_ID=${DO_SSH_KEY_ID}" >> $GITHUB_ENV

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DO_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/authorized_keys
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ env.DROPLET_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to Digital Ocean Droplet using SSH
        env:
          DROPLET_IP: ${{ env.DROPLET_IP }}
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          REGISTRY_URL: ${{ env.REGISTRY_URL }}
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          IMAGE_TAG: ${{ inputs.image_tag }}
          DOCKER_IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.image_tag }}
        run: |
          ssh -o StrictHostKeyChecking=no root@$DROPLET_IP << EOF
            command -v doctl >/dev/null 2>&1 || snap install doctl
            mkdir -p ~/.config
            echo "Digital Ocean Droplet IP: $DROPLET_IP"
            echo "Digital Ocean Droplet Name: $DROPLET_NAME"
            echo "Digital Ocean API Token: $DIGITALOCEAN_ACCESS_TOKEN"
            echo "Docker Image: $DOCKER_IMAGE"
            echo "Registry URL: $REGISTRY_URL"
            echo "Registry: $REGISTRY"
            /snap/bin/doctl auth init --access-token $DIGITALOCEAN_ACCESS_TOKEN
            /snap/bin/doctl registry login --expiry-seconds 600
            docker pull $DOCKER_IMAGE
            docker run -d --name smart-keycloak -p 8080:8080 $DOCKER_IMAGE
          EOF
#            #docker kill $(docker ps -q)
#            docker system prune -a