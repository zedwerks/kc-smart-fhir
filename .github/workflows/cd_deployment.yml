name: Deploy to Digital Ocean Droplet

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Docker image tag"
        required: true
        default: "latest"
      target_environment:
        description: "Target Environment"
        required: true
        default: "demo"
env:
  REGISTRY_URL: "https://registry.digitalocean.com/zedwerks"
  REGISTRY: registry.digitalocean.com/zedwerks
  IMAGE_NAME: keycloak-smart-fhir
  CONTAINER_NAME: keycloak-smart-fhir
  DROPLET_NAME: smart-on-fhir
  DROPLET_REGION: tor1
  DROPLET_SIZE: s-1vcpu-1gb
  DROPLET_IP: "blank"
  droplet_exists: "false"
  IMAGE_TAG: ${{ inputs.image_tag }}
  KEYCLOAK_HOSTNAME_URL: 'http://localhost:8080'
  KEYCLOAK_TARGET_REALM: 'smart'
  KEYCLOAK_TERRAFORM_CLIENT_ID: 'terraform'

jobs:
   droplet:
    name: Create Droplet, if not exists
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Authenticate with DigitalOcean
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        run: doctl auth init -t $DIGITALOCEAN_ACCESS_TOKEN

      - name: Check if droplet exists
        id: check_droplet
        env:
          DROPLET_NAME: ${{ env.DROPLET_NAME }}
        run: |
          if doctl compute droplet list --no-header --format Name | grep -q "^$DROPLET_NAME$"; then
            echo "Droplet already exists."
            echo "droplet_exists=true" >> $GITHUB_ENV
          else
            echo "Droplet does not exist."
            echo "droplet_exists=false" >> $GITHUB_ENV
          fi

      - name: Create Droplet if needed
        if: env.droplet_exists == 'false'
        id: create_droplet
        env:
          DROPLET_NAME: ${{ env.DROPLET_NAME }}
          DROPLET_REGION: ${{ env.DROPLET_REGION }}
          DROPLET_SIZE: ${{ env.DROPLET_SIZE }}
        run: |
          doctl compute droplet create $DROPLET_NAME \
            --verbose \
            --region $DROPLET_REGION \
            --size $DROPLET_SIZE \
            --image docker-20-04 \
            --ssh-keys $DO_S
   deploy:
    name: Deploy to Digital Ocean Droplet
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: droplet
    environment: ${{ inputs.target_environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Get Droplet IP
        env:
          DROPLET_NAME: ${{ env.DROPLET_NAME }}
        run: |
          DROPLET_IP=$(doctl compute droplet list --no-header --format Name,PublicIPv4 | grep "$DROPLET_NAME" | awk '{print $2}')
          echo "DROPLET_IP=${DROPLET_IP}" >> $GITHUB_ENV

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DO_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/authorized_keys
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ env.DROPLET_IP }} >> ~/.ssh/known_hosts

      - name: Set environment
        run: echo "Deploying to ${{ github.events.inputs.environment }} environment"

      - name: Log in to DigitalOcean Container Registry with short-lived token
        run: doctl registry login --expiry-seconds 600

      - name: Docker registry login
        run: docker login ${{ env.REGISTRY }}

      - name: Deploy and Run Keycloak on Droplet using SSH
        env:
          DROPLET_IP: ${{ env.DROPLET_IP }}
          IMAGE_TAG: ${{ inputs.image_tag }}
          KEYCLOAK_ADMIN_PASSWORD: ${{ secrets.KEYCLOAK_ADMIN_PASSWORD }}
          KEYCLOAK_HOSTNAME_URL: ${{ env.KEYCLOAK_HOSTNAME_URL }}
          KEYCLOAK_TARGET_REALM: ${{ env.KEYCLOAK_TARGET_REALM }}
          KEYCLOAK_TERRAFORM_CLIENT_ID: ${{ env.KEYCLOAK_TERRAFORM_CLIENT_ID }}
          KEYCLOAK_TERRAFORM_CLIENT_SECRET: ${{ secrets.KEYCLOAK_TERRAFORM_CLIENT_SECRET }}
          DOCKER_IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.image_tag }}
        run: |
          ssh -o StrictHostKeyChecking=no root@$DROPLET_IP << EOF
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true
            CONTAINER_ID=$(docker ps -q)
            if [ -n "$CONTAINER_ID" ]; then
              docker kill $CONTAINER_ID
            fi
            echo y | docker system prune -a
            docker pull $DOCKER_IMAGE
            echo "Starting Keycloak container..."
            docker run -d --name $CONTAINER_NAME -p 80:8080 -p 443:8443 \
              -e KC_BOOTSTRAP_ADMIN_USERNAME=admin \
              -e KC_BOOTSTRAP_ADMIN_PASSWORD=$KEYCLOAK_ADMIN_PASSWORD \
              -e KEYCLOAK_ADMIN=admin \
              -e KEYCLOAK_ADMIN_PASSWORD=$KEYCLOAK_ADMIN_PASSWORD \
              -e KC_HOSTNAME_STRICT_HTTPS=true \
              -e KC_HOSTNAME_URL=$KEYCLOAK_HOSTNAME_URL \
              -e KEYCLOAK_TARGET_REALM=$KEYCLOAK_TARGET_REALM \
              -e KEYCLOAK_TERRAFORM_CLIENT_ID=$KEYCLOAK_TERRAFORM_CLIENT_ID \
              -e KEYCLOAK_TERRAFORM_CLIENT_SECRET=$KEYCLOAK_TERRAFORM_CLIENT_SECRET \
              $DOCKER_IMAGE
            echo "Docker Keycloak container started"
          EOF
          echo "Keycloak container started"

      - name: Wait for Keycloak to start
        env:
          DROPLET_IP: ${{ env.DROPLET_IP }}
        run: |
          echo "Waiting for Keycloak to start..."
          ssh -o StrictHostKeyChecking=no root@$DROPLET_IP << EOF
            echo "Waiting for Keycloak to start..."
            for i in {1..30 }; do
              if docker exec -it $CONTAINER_NAME /bin/bash -c "curl -s -k -I https://localhost:8080/realms/master/.well-known/openid-configuration" > /dev/null; then
                echo "Keycloak is up and running!"
                break
              else
                echo "Keycloak is not up yet. Waiting..."
                sleep 5 
              fi
            done
            docker ps -a
          EOF
        timeout-minutes: 5

      - name: Add realm-admin for terraform client
        env:
          DROPLET_IP: ${{ env.DROPLET_IP }}
          KEYCLOAK_TERRAFORM_CLIENT_ID: ${{ env.KEYCLOAK_TERRAFORM_CLIENT_ID }}
          KEYCLOAK_ADMIN: admin
          KEYCLOAK_ADMIN_PASSWORD: ${{ secrets.KEYCLOAK_ADMIN_PASSWORD }}
          KEYCLOAK_TARGET_REALM: ${{ env.KEYCLOAK_TARGET_REALM }}
        run: |
          echo "Setting up realm-admin for the terraform client..."
          ssh -o StrictHostKeyChecking=no root@$DROPLET_IP << EOF 
            echo "Setting up realm-admin for the terraform client..."
            docker exec -it -e KEYCLOAK_ADMIN=$KEYCLOAK_ADMIN \
              -e KEYCLOAK_ADMIN_PASSWORD=$KEYCLOAK_ADMIN_PASSWORD \
              -e KEYCLOAK_TARGET_REALM=$KEYCLOAK_TARGET_REALM \
              -w /opt/keycloak/bin \
              $CONTAINER_NAME /bin/bash ./terraform-realm-admin.sh
          EOF

